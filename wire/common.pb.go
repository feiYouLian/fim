// Code generated by protoc-gen-go. DO NOT EDIT.
// source: common.proto

package wire

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DeviceType int32

const (
	DeviceType_PHONE   DeviceType = 0
	DeviceType_PAD     DeviceType = 1
	DeviceType_PC      DeviceType = 2
	DeviceType_WEB     DeviceType = 3
	DeviceType_BACKEND DeviceType = 4
)

var DeviceType_name = map[int32]string{
	0: "PHONE",
	1: "PAD",
	2: "PC",
	3: "WEB",
	4: "BACKEND",
}

var DeviceType_value = map[string]int32{
	"PHONE":   0,
	"PAD":     1,
	"PC":      2,
	"WEB":     3,
	"BACKEND": 4,
}

func (x DeviceType) String() string {
	return proto.EnumName(DeviceType_name, int32(x))
}

func (DeviceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{0}
}

// logic bool
type LBool int32

const (
	LBool_N LBool = 0
	LBool_Y LBool = 1
)

var LBool_name = map[int32]string{
	0: "N",
	1: "Y",
}

var LBool_value = map[string]int32{
	"N": 0,
	"Y": 1,
}

func (x LBool) String() string {
	return proto.EnumName(LBool_name, int32(x))
}

func (LBool) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{1}
}

type ChatType int32

const (
	ChatType_SELF  ChatType = 0
	ChatType_CHAT  ChatType = 1
	ChatType_GROUP ChatType = 2
)

var ChatType_name = map[int32]string{
	0: "SELF",
	1: "CHAT",
	2: "GROUP",
}

var ChatType_value = map[string]int32{
	"SELF":  0,
	"CHAT":  1,
	"GROUP": 2,
}

func (x ChatType) String() string {
	return proto.EnumName(ChatType_name, int32(x))
}

func (ChatType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{2}
}

type AffectedReply struct {
	AffectedRows         int32    `protobuf:"varint,1,opt,name=affected_rows,json=affectedRows,proto3" json:"affected_rows,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AffectedReply) Reset()         { *m = AffectedReply{} }
func (m *AffectedReply) String() string { return proto.CompactTextString(m) }
func (*AffectedReply) ProtoMessage()    {}
func (*AffectedReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{0}
}

func (m *AffectedReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AffectedReply.Unmarshal(m, b)
}
func (m *AffectedReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AffectedReply.Marshal(b, m, deterministic)
}
func (m *AffectedReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AffectedReply.Merge(m, src)
}
func (m *AffectedReply) XXX_Size() int {
	return xxx_messageInfo_AffectedReply.Size(m)
}
func (m *AffectedReply) XXX_DiscardUnknown() {
	xxx_messageInfo_AffectedReply.DiscardUnknown(m)
}

var xxx_messageInfo_AffectedReply proto.InternalMessageInfo

func (m *AffectedReply) GetAffectedRows() int32 {
	if m != nil {
		return m.AffectedRows
	}
	return 0
}

func init() {
	proto.RegisterEnum("wire.DeviceType", DeviceType_name, DeviceType_value)
	proto.RegisterEnum("wire.LBool", LBool_name, LBool_value)
	proto.RegisterEnum("wire.ChatType", ChatType_name, ChatType_value)
	proto.RegisterType((*AffectedReply)(nil), "wire.AffectedReply")
}

func init() { proto.RegisterFile("common.proto", fileDescriptor_555bd8c177793206) }

var fileDescriptor_555bd8c177793206 = []byte{
	// 211 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0xce, 0xcf, 0xcd,
	0xcd, 0xcf, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x29, 0xcf, 0x2c, 0x4a, 0x55, 0x32,
	0xe1, 0xe2, 0x75, 0x4c, 0x4b, 0x4b, 0x4d, 0x2e, 0x49, 0x4d, 0x09, 0x4a, 0x2d, 0xc8, 0xa9, 0x14,
	0x52, 0xe6, 0xe2, 0x4d, 0x84, 0x0a, 0xc4, 0x17, 0xe5, 0x97, 0x17, 0x4b, 0x30, 0x2a, 0x30, 0x6a,
	0xb0, 0x06, 0xf1, 0xc0, 0x04, 0x83, 0xf2, 0xcb, 0x8b, 0xb5, 0xec, 0xb8, 0xb8, 0x5c, 0x52, 0xcb,
	0x32, 0x93, 0x53, 0x43, 0x2a, 0x0b, 0x52, 0x85, 0x38, 0xb9, 0x58, 0x03, 0x3c, 0xfc, 0xfd, 0x5c,
	0x05, 0x18, 0x84, 0xd8, 0xb9, 0x98, 0x03, 0x1c, 0x5d, 0x04, 0x18, 0x85, 0xd8, 0xb8, 0x98, 0x02,
	0x9c, 0x05, 0x98, 0x40, 0x02, 0xe1, 0xae, 0x4e, 0x02, 0xcc, 0x42, 0xdc, 0x5c, 0xec, 0x4e, 0x8e,
	0xce, 0xde, 0xae, 0x7e, 0x2e, 0x02, 0x2c, 0x5a, 0xa2, 0x5c, 0xac, 0x3e, 0x4e, 0xf9, 0xf9, 0x39,
	0x42, 0xac, 0x5c, 0x8c, 0x7e, 0x02, 0x0c, 0x20, 0x2a, 0x52, 0x80, 0x51, 0x4b, 0x93, 0x8b, 0xc3,
	0x39, 0x23, 0xb1, 0x04, 0x6c, 0x28, 0x07, 0x17, 0x4b, 0xb0, 0xab, 0x8f, 0x9b, 0x00, 0x03, 0x88,
	0xe5, 0xec, 0xe1, 0x18, 0x22, 0xc0, 0x08, 0xb2, 0xc8, 0x3d, 0xc8, 0x3f, 0x34, 0x40, 0x80, 0x29,
	0x89, 0x0d, 0xec, 0x09, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x63, 0x68, 0x4d, 0x6a, 0xd4,
	0x00, 0x00, 0x00,
}
